@charset "UTF-8";
/* 주석2 */
/******************************************************************************************************************************* 

    [사스 핵심 사용법]
    1. 사스 확장자별 파일 구분
    (1) .scss - 사스 관리 파일
    (2) .sass - 중괄호, 세미콜론 사용하지 않는 문법 사스 파일.
    (3) .css.map - 사스 파일과 CSS 연결 정보 파일
    (4) .css - 실제로 적용되는컴파일된 CSS

    2. 사스 파일 컴파일 하기
    -> Live Sass Compiler 확장 프로그램 설치후 하단 Watch Sass 클릭하여 작동시킴
    -> 에러가 없는 한 컴파일하여 같은 이름의 CSS 파일을 생성함 (Watting 상태가 됨)
    -> 에러 발생시 컴파일이 안되고 cmd 창에 에러 메시지가 뜬다

    3. 주요 문법
    (1) 네스팅 기법
        - 선택자 중괄호 안에 다른 하위 선택을 하는 것
        예) div{h1{color:red;}}
        -> 장점 : 같은 셋팅 요소를 선택시 중복된 선택자 반복을 하지 않아도 된다! 또한 같은 구성 요소를 묶어서 셋팅 관리 가능
    (2) 속성 접두어 묶음 기법
        - 반복되는 같은 종류의 하위 속성의 접두어를 한번만 사용하여 셋팅을 묶어주는 방법
        예) font: {size: 10px; weight:bold; ..}
    (3) 변수 사용 기법
        - 동일하게 사용할 값을 변수에 넣고 디자인을 배치함
        - 변수 사용법 _> $변수명: 값
        - 변수명은 모두 붙여 쓰며 구분 단어는 케믈 케이스(camelCase) 또는 캐밥케이스(camel-case)를 사용한다
        - 변수의 범위는 변수를  선언후 하위로 상속되어 값이 유지됨
    (4) 파일 분리 기법
        - @import : 부분 파일을 분리하여 공통 모듈로 합쳐서 사용한다
        - 부분 파일명은 사스에서 앞에 언더바를 붙여서 사용하는 것이 원칙이지만 언더바를 안 써도 기본적으로 부분 파일 처리를 해준다
        - 파일 호출시 확장자 생략 가능 (예) @import "reset";
        - 자동으로 앞에 언더바와 확장자를 생략해준다
        - 일반 CSS import와 다른 점은 http 요청을 하지 않음
    (5) 믹스인 : 일종의 공통 CSS 코드를 리턴하는 함수
        - 셋팅 형식 :
        [1] 전달 변수가 없는 믹스인
        @mixin 믹스인 이름 {CSS 코드}

        [2] 전달변수가 있는 믹스인
        @mixin 믹스인 이름 (변수){CSS 코드}

        [3] 전달변수가 있고 기본값도 있는 믹스인
        @mixin 믹스인 이름 (변수:기본값){CSS 코드}
        - 믹스인 호출 방법 : 믹스인을 포함하라 (@include)
        [1]
        @include 믹스인 이름;
        [2]
        @include 믹스인 이름 (전달값);
    (6) 네스팅 이어붙이기 기법 (&)
        - 가상 요소, 가상 클래스, 특정 클래스를 현재 선택 요소에 셋팅하는 방법
        - &(앰퍼센드)는 현재 선택 요소 자신을 가리킴
    (7) 반복 코드 확장 : @extend (extend는 연장하다, 확장하다)
        - 사용 이유 : 반복되는 같은 셋팅을 클래스를 지정하여 쉽게 도입한다
        - 사용 방법 : 선택자 코드 안에 @extend 클래스명 형식으로 사용
        - 공통 코드 외에 다른 셋팅 속성 추가시 하단에 추가로 구현함
        - 장점 : 공통 코드 적용을 위해 각 요소에 클래스를 일일히 주지않아도 공통 코드를 적용할 수 있다




*******************************************************************************************************************************/
/* 기본 초기화 셋팅 */
/* 기본 초기화 */
html,
body,
h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol,
dl,
dt,
dd,
p,
figure,
figcaption {
  margin: 0;
  padding: 0;
}

/* ul,ol 순번,블릿없앰 */
ul, ol {
  list-style: none;
}

/* a요소 리셋 */
a {
  color: #222;
  text-decoration: none;
}

/* heading 요소 글자크기 */
h1, h2, h3, h4, h5, h6 {
  font-size: 100%;
  /* 박스 디자인시 글자크기로 인한
  영향을 없애기 위한 초기화! */
}

/* 이미지 초기화 */
img {
  /* 이미지 링크시 서버에서 볼때
  파란 테두리 없앰 */
  border: none;
  /* 박스에 이미지만 넣을때
  엔터간극 4px 하단공백 없애기  */
  vertical-align: middle;
}

.wrapper {
  max-width: 1000px;
  margin: 0 auto;
}

/* 상단 영역 */
.top-area {
  color: rgb(188, 59, 59);
  /* 서브 타이틀 박스 */
}
.top-area h1 {
  color: aqua;
  margin-bottom: 40px;
  font-size: 40px;
  font-family: "Times New Roman";
  text-align: center;
  text-decoration: underline;
  text-underline-offset: 10px;
  text-shadow: 5px 5px 4px #000007;
  /*         font: {
          size: 40px;
          family: "Times New Roman";
      }
      text: {
        align: center;
        decoration: underline;
        underline-offset: 10px;
        shadow: 5px 5px 4px #000007;
      } */
  background-color: rgb(255, 87, 87);
  background-image: url(../images/flower.png);
  background-size: 70px;
  background-position: center;
  background-repeat: repeat-x;
  padding: 20px;
}
.top-area h2 {
  font-size: 30px;
}

/* 메인 영역 */
.main-area section {
  border-color: pink;
  border-style: dashed;
  border-width: 7px;
  margin-bottom: 20px;
  padding: 20px;
}
.main-area h3 {
  color: darkblue;
  margin-bottom: 40px;
  font-size: 40px;
  font-family: "Times New Roman";
  text-align: center;
  text-decoration: underline;
  text-underline-offset: 10px;
  text-shadow: 5px 5px 4px #000007;
}
.main-area ul,
.main-area ol,
.main-area p {
  line-height: 2;
  font-size: 24px;
}
.main-area ul li,
.main-area ol li,
.main-area p li {
  text-decoration: underline;
  text-underline-offset: 10px;
  text-decoration-thickness: 5px;
  text-decoration-color: rgb(31, 103, 166);
  text-align: center;
  background: #ff0;
  /* 가상요소 블릿 넣기 */
}
.main-area ul li:first-child,
.main-area ol li:first-child,
.main-area p li:first-child {
  color: orchid;
  font-weight: bold;
  font-size: 30px;
  text-shadow: 1px 0 #000, -1px 0 #000, 0 1px #000, 0 -1px #000;
}
.main-area ul li::before,
.main-area ol li::before,
.main-area p li::before {
  content: "😎";
}

/* 버튼 기본 디자인 클래스 */
.button-basic, .button-report {
  display: inline-block;
  border: 1px solid #222;
  border-radius: 20px;
  padding: 15px 30px;
  text-align: center;
  font-size: 20px;
  cursor: pointer;
  margin-left: 20px;
}
.button-basic:hover, .button-report:hover {
  background-color: palevioletred;
  text-decoration: overline;
  text-decoration-style: wavy;
}
.button-basic.my, .my.button-report {
  text-decoration: underline;
  text-decoration-style: dotted;
  text-underline-offset: 10px;
  text-decoration-thickness: 5px;
}

.box-basic, .bottom-title, .button-box, .top-area h2 {
  text-align: center;
  padding: 20px 0;
}

/* 기본 디자인후에 특정 클래스에 그대로 가져오기 */
.button-report {
  background-color: orange;
  color: #fff;
}

/* 기본 박스 디자인을 입혀서 버튼 박스 셋팅하기 */
.button-box {
  background-image: linear-gradient(to bottom, lightgreen, transparent);
}

/* 하단 타이틀 */
.bottom-title {
  color: red;
  margin-bottom: 40px;
  font-size: 40px;
  font-family: "Times New Roman";
  text-align: center;
  text-decoration: underline;
  text-underline-offset: 10px;
  text-shadow: 5px 5px 4px #000007;
}/*# sourceMappingURL=main.css.map */